apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
  init_superset.sh: |
    gunicorn superset:app
  connection_info.yaml: |
    # TODO: WIP on templating the superset config file with connection info.
    rabbitmq:
      host: "rabbit-rabbitmq-ha.plaid"
      port: "5672"
      username: "event_user"
      password: "village painting wedding outcome"
      queue: "events_stage"
      vhost: "events"
    redis:
      CACHE_REDIS_SENTINELS: 
      CACHE_REDIS_SENTINEL_MASTER: 
      CACHE_REDIS_PASSWORD: 
      CACHE_REDIS_DB: 
  superset_config.py: |
    import os
    import ssl
    from collections import OrderedDict
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from plaid.security import PlaidSecurityManager
  
    ssl._create_default_https_context = ssl._create_unverified_context
  
    basedir = os.path.abspath(os.path.dirname(__file__))
    #ROW_LIMIT = 5000
    #SUPERSET_WORKERS = 4
  
    # I created a mapbox account under garrett.bates@tartansolutions.com
    MAPBOX_API_KEY = 'pk.eyJ1IjoiZ2JhdGVzIiwiYSI6ImNqaGkwY25mZzIyZGczZG50MHpxMXk0bXYifQ.KKZQGn5QOn14NTnyNFNczQ'
  
    HOSTNAME = 'stage.plaidcloud.com'
    PLAID_HOST = 'stage.plaidcloud.com'
    PLAID_DATABASE_HOST = '192.168.6.8'
    SCHEME = 'https'
    SQLALCHEMY_DATABASE_URI = 'postgresql://superset_prod:appliance chalk closet statement@psql-stage-postgresql:5432/superset_prod'
    PUBLIC_ROLE_LIKE_PLAID = False
    ADMIN_ENABLED = True
  
    RABBITMQ_CONNECTION_INFO = {
        "host": "{{ .Values.rabbitmq.host }}",
        "port": {{ .Values.rabbitmq.port }},
        "username": "{{ .Values.rabbitmq.username }}",
        "password": "{{ .Values.rabbitmq.password }}",
        "queue": "{{ .Values.rabbitmq.queue }}",
        "vhost": "{{ .Values.rabbitmq.vhost }}",
    }

    # Use our security manager for plaid user management.
    CUSTOM_SECURITY_MANAGER = PlaidSecurityManager #noqa
  
    # Uncomment to setup Your App name
    APP_NAME = 'PlaidCloud'
  
    # Uncomment to setup an App icon
    APP_ICON = '/static/assets/images/plaidcloud.png'
  
    CACHE_CONFIG = {
        # 'CACHE_TYPE': 'simple',
        'CACHE_TYPE': 'redissentinel',
        'CACHE_REDIS_SENTINELS': [("{{ .Values.redis.host }}", {{ .Values.redis.port }})],
        'CACHE_REDIS_SENTINEL_MASTER': "{{ .Values.redis.group }}",
        'CACHE_REDIS_DB': 0,
    }
    
    TABLE_NAMES_CACHE_CONFIG = {
        # 'CACHE_TYPE': 'simple',
        'CACHE_TYPE': 'redissentinel',
        'CACHE_REDIS_SENTINELS': [("{{ .Values.redis.host }}", {{ .Values.redis.port }})],
        'CACHE_REDIS_SENTINEL_MASTER': "{{ .Values.redis.group }}",
        'CACHE_REDIS_DB': 1,
    }
  
    # Disable Druid. We don't use it.
    DRUID_IS_ACTIVE = False
  
    HIDE_SCHEMA_NAMES = True
  
    # HTTP_HEADERS = {
    #     'X-Frame-Options': 'SAMEORIGIN',
    #     'Cache-Control': 'no-cache, no-store, must-revalidate',
    # }
  
    ADDITIONAL_MODULE_DS_MAP = OrderedDict(
      [
        ("superset.connectors.plaid.models", ["PlaidTable"]),
      ]
    )
  
    DISABLED_CACHE_URIS = [
        '/superset/welcome',
        '/login',
        '/logout',
        '/token',
        '/oauth_authorized',
    ]
  
    # Load FAB views here.
    def import_stuff(app):
        from flask import request
  
        @app.after_request
        def after_request(response):
            location = response.headers.get('Location')
            if location and location.startswith('http://'):
                response.headers.set('Location', location.replace('http://', 'https://', 1))
            if any(request.path.startswith(u) for u in DISABLED_CACHE_URIS):
                response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
            return response
  
    FLASK_APP_MUTATOR = import_stuff
  
    CSRF_ENABLED = True
  
    # We don't want users to be able to register through UI. PlaidSecurityManager
    # will register a user automatically if they can connect via oauth.
    AUTH_USER_REGISTRATION = False
  
    # If users can register for an account (see above setting), this would be their default role.
    #AUTH_USER_REGISTRATION_ROLE = "Public"
    AUTH_TYPE = 1
    #OAUTH_PROVIDERS = [
    #     {
    #        'name': 'plaidcloud',
    #        'token_key': 'access_token',
    #        'remote_app': {
    #            'base_url': 'https://{}/json-rpc/'.format(HOSTNAME),
    #            'authorize_url': 'https://{}/oauth2/token'.format(HOSTNAME),
    #            'access_token_url': 'https://{}/oauth2/token'.format(HOSTNAME),
    #            # TODO: Set up configure_superset.py to generate oauth key pair.
    #            'consumer_key': '9c176439-3581-4293-99ff-4a153d38d880',
    #            'consumer_secret': '6b015909-68e4-4e20-bcb6-b532e69143ed',
    #        }
    #    }
    #]
  
    PLAID_BASE_PERMISSIONS = {
        'menu_access': {
            'Import Dashboards',
            'Manage',
            'Data',
            'Projects',
            'Charts',
            'Dashboards',
            # 'SQL Editor',
            # 'Query Search',
            # 'Queries',
            # 'Saved Queries',
            'Tables',
            # 'Refresh',
        },
        'can_list': {
            'DatabaseAsync',
            'DatabaseTablesAsync',
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            # 'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'CssTemplateAsyncModelView',
            'PlaidMetricInlineView',
            'Datasource',
        },
        'can_show': {
            'DatabaseAsync',
            'DatabaseTablesAsync',
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'PlaidMetricInlineView',
            'Datasource',
        },
        'can_delete': {
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'PlaidMetricInlineView',
        } ,
        'can_edit': {
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'PlaidMetricInlineView',
        },
        'can_download': {
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'PlaidMetricInlineView',
        },
        'can_add': {
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'QueryView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableColumnInlineView',
            'SqlMetricInlineView',
            'TableModelView',
            'PlaidMetricInlineView',
        },
        'muldelete': {
            'SliceModelView',
            'SliceAsync',
            'SliceAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
            'SavedQueryViewApi',
            'SavedQueryView',
            'TableModelView',
            'PlaidMetricInlineView',
        },
        'mulexport': {
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DashboardAddView',
        },
        'refresh': {
            'TableModelView',
        },
        'yaml_export': {
            'TableModelView',
        },
        'can_dashboard': {
            'Superset',
        },
        'can_checkbox': {
            'Superset',
        },
        'can_csrf_token': {
            'Superset',
        },
        'can_csv': {
            'Superset',
        },
        'can_fetch_datasource_metadata': {
            'Superset',
        },
        'can_search_queries': {
            'Superset',
        },
        'can_tables': {
            'Superset',
        },
        'can_table': {
            'Superset',
        },
        'can_user_slices': {
            'Superset',
        },
        'can_copy_dash': {
            'Superset',
        },
        'can_explore_json': {
            'Superset',
        },
        'can_slice': {
            'Superset',
        },
        'can_created_dashboards': {
            'Superset',
        },
        'can_warm_up_cache': {
            'Superset',
        },
        'can_results': {
            'Superset',
        },
        'can_fave_dashboards': {
            'Superset',
        },
        'can_sliceQuery': {
            'Superset',
        },
        'can_add_slices': {
            'Superset',
        },
        'can_fave_slices': {
            'Superset',
        },
        'can_save_dash': {
            'Superset',
        },
        'can_select_star': {
            'Superset',
        },
        'can_schemas': {
            'Superset',
        },
        'can_cache_key_exist': {
            'Superset',
        },
        'can_fave_dashboards_by_username': {
            'Superset',
        },
        'can_filter': {
            'Superset',
        },
        'can_created_slices': {
            'Superset',
        },
        'can_slice_json': {
            'Superset',
        },
        'can_stop_query': {
            'Superset',
        },
        'can_explore': {
            'Superset',
        },
        'can_explorev2': {
            'Superset',
        },
        'can_recent_activity': {
            'Superset',
        },
        'can_import_dashboards': {
            'Superset',
        },
        'can_approve': {
            'Superset',
        },
        'can_cached_key': {
            'Superset',
        },
        'can_sql_json': {
            'Superset',
        },
        'can_refresh': {
            'Plaid',
        },
        'can_refresh_async': {
            'Plaid',
        },
        'can_databases': {
            'Superset',
        },
        'can_datasources': {
            'Superset'
        },
        'datasource_access': {
            '[placeholder_project].[change_me](id:1)',
        }
    }
  
    class SetURLScheme(object):
        '''Set the URL scheme for requests made from Flask. Default
          is "http", and applies to things such as redirect_uri in
          AUTH_OAUTH configuration.
  
        Example (in nginx config):
        location / {
            proxy_pass http://localhost:8088;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Scheme $scheme;
        }
  
        Source:
        http://flask.pocoo.org/snippets/35/
  
        :param app: the WSGI application
        '''
        def __init__(self, app):
            self.app = app
  
        def __call__(self, environ, start_response):
            scheme = environ.get('HTTP_X_SCHEME', 'https')
            if scheme:
                environ['wsgi.url_scheme'] = scheme
            return self.app(environ, start_response)
  
    ADDITIONAL_MIDDLEWARE = [SetURLScheme, ]