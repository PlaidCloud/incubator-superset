apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
data:
  __init__.py: |
    # Exists for making imports easier.
    
  init_superset.sh: |
    gunicorn superset:app

  superset_config.py: |
    import os
    import ssl
    from collections import OrderedDict
    from flask_appbuilder.security.manager import AUTH_DB, AUTH_OID
    from plaid.security import PlaidSecurityManager
    from plaid_permissions import PLAID_BASE_PERMISSIONS
  
    ssl._create_default_https_context = ssl._create_unverified_context
  
    basedir = os.path.abspath(os.path.dirname(__file__))
    #ROW_LIMIT = 5000
    #SUPERSET_WORKERS = 4
  
    # I created a mapbox account under garrett.bates@tartansolutions.com
    MAPBOX_API_KEY = '{{ .Values.mapbox.apiKey }}'
  
    HOSTNAME = '{{ .Values.superset.hostname }}'
    PLAID_HOST = '{{ .Values.superset.hostname }}'
    PLAID_DATABASE_HOST = '{{ .Values.database.greenplumHost }}'
    SCHEME = 'https'
    SQLALCHEMY_DATABASE_URI = 'postgresql://{{ .Values.database.user }}:{{ .Values.database.pass }}@{{ .Values.database.host }}:{{ .Values.database.port }}/{{ .Values.database.name }}'
    PUBLIC_ROLE_LIKE_PLAID = False
    ADMIN_ENABLED = True
    SESSION_EXPIRATION = 600

    ENABLE_CORS = False
    PREFERRED_URL_SCHEME = 'https'
  
    RABBITMQ_CONNECTION_INFO = {
        "host": "{{ .Values.rabbitmq.host }}",
        "port": {{ .Values.rabbitmq.port }},
        "username": "{{ .Values.rabbitmq.username }}",
        "password": "{{ .Values.rabbitmq.password }}",
        "queue": "{{ .Values.rabbitmq.queue }}",
        "vhost": "{{ .Values.rabbitmq.vhost }}",
    }

    # Use our security manager for plaid user management.
    CUSTOM_SECURITY_MANAGER = PlaidSecurityManager #noqa
  
    # Uncomment to setup Your App name
    APP_NAME = 'PlaidCloud'
  
    # Uncomment to setup an App icon
    APP_ICON = '/static/assets/images/plaidcloud.png'
  
    CACHE_CONFIG = {
        'CACHE_TYPE': '{{ .Values.devMode | ternary "redis" "redissentinel" }}',
        {{- if .Values.devMode }}
        'CACHE_REDIS_HOST': '{{ .Values.redis.host }}',
        'CACHE_REDIS_PORT': {{ .Values.redis.port }},
        {{- else }}
        'CACHE_REDIS_SENTINELS': [("{{ .Values.redis.host }}", {{ .Values.redis.port }})],
        'CACHE_REDIS_SENTINEL_MASTER': "{{ .Values.redis.group }}",
        {{- end }}
        'CACHE_REDIS_DB': {{ .Values.redis.cache_db }},
    }
    
    TABLE_NAMES_CACHE_CONFIG = {
        'CACHE_TYPE': '{{ .Values.devMode | ternary "redis" "redissentinel" }}',
        {{- if .Values.devMode }}
        'CACHE_REDIS_HOST': '{{ .Values.redis.host }}',
        'CACHE_REDIS_PORT': {{ .Values.redis.port }},
        {{- else }}
        'CACHE_REDIS_SENTINELS': [("{{ .Values.redis.host }}", {{ .Values.redis.port }})],
        'CACHE_REDIS_SENTINEL_MASTER': "{{ .Values.redis.group }}",
        {{- end }}
        'CACHE_REDIS_DB': {{ .Values.redis.table_db }},
    }
  
    # Disable Druid. We don't use it.
    DRUID_IS_ACTIVE = False
  
    HIDE_SCHEMA_NAMES = True
  
    # HTTP_HEADERS = {
    #     'X-Frame-Options': 'SAMEORIGIN',
    #     'Cache-Control': 'no-cache, no-store, must-revalidate',
    # }
  
    ADDITIONAL_MODULE_DS_MAP = OrderedDict(
      [
        ("superset.connectors.plaid.models", ["PlaidTable"]),
      ]
    )
  
    DISABLED_CACHE_URIS = [
        '/superset/welcome',
        '/login',
        '/logout',
        '/token',
        '/oauth_authorized',
    ]
  
    # Load FAB views here.
    def import_stuff(app):
        from flask import request
  
        @app.after_request
        def after_request(response):
            location = response.headers.get('Location')
            if location and location.startswith('http://'):
                response.headers.set('Location', location.replace('http://', 'https://', 1))
            if any(request.path.startswith(u) for u in DISABLED_CACHE_URIS):
                response.headers.set('Cache-Control', 'no-cache, no-store, must-revalidate')
            return response
  
    FLASK_APP_MUTATOR = import_stuff
  
    CSRF_ENABLED = True
  
    # We don't want users to be able to register through UI. PlaidSecurityManager
    # will register a user automatically if they can connect via oauth.
    AUTH_USER_REGISTRATION = False
  
    # If users can register for an account (see above setting), this would be their default role.
    #AUTH_USER_REGISTRATION_ROLE = "Public"
    AUTH_TYPE = AUTH_DB

    OIDC_PARAMS = {
        "client_id": "{{ .Values.oidc.clientId }}",
        "client_secret": "{{ .Values.oidc.clientSecret }}",
        "token_url": "{{ .Values.oidc.tokenEndpoint }}",
        # token_params: {},
        "auth_url": "{{ .Values.oidc.authEndpoint }}",
        "auth_params": {
            "prompt": "none",
        },
        "base_url": "{{ .Values.oidc.baseUrl }}",
        "jwks_uri": "{{ .Values.oidc.jwksEndpoint }}",
        "client_kwargs": {
            'scope': 'openid profile',
            'token_endpoint_auth_method': 'client_secret_basic',
        },
    }
  
    class SetURLScheme(object):
        '''Set the URL scheme for requests made from Flask. Default
          is "http", and applies to things such as redirect_uri in
          AUTH_OAUTH configuration.
  
        Example (in nginx config):
        location / {
            proxy_pass http://localhost:8088;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Scheme $scheme;
        }
  
        Source:
        http://flask.pocoo.org/snippets/35/
  
        :param app: the WSGI application
        '''
        def __init__(self, app):
            self.app = app
  
        def __call__(self, environ, start_response):
            scheme = environ.get('HTTP_X_SCHEME', 'https')
            if scheme:
                environ['wsgi.url_scheme'] = scheme
            return self.app(environ, start_response)
  
    ADDITIONAL_MIDDLEWARE = [SetURLScheme, ]


  plaid_permissions.py: |
    PLAID_BASE_PERMISSIONS = {
        'can_activate': {
            'TabStateView',
        },
        'can_add': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            #'DatabaseAsync',
            #'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            'PlaidMetricInlineView',
            #'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            'TableColumnInlineView',
            #'TableModelView',
            #'UserDBModelView',
        },
        'can_add_slices': {
            'Superset',
        },
        'can_annotation_json': {
            #'Superset',
        },
        'can_approve': {
            'Superset',
        },
        'can_available_domains': {
            #'Superset',
        },
        'can_cache_key_exist': {
            'Superset',
        },
        'can_cached_key': {
            'Superset',
        },
        'can_chart': {
            #'UserStatsChartView',
        },
        'can_checkbox': {
            'Superset',
        },
        'can_copy_dash': {
            'Superset',
        },
        'can_created_dashboards': {
            'Superset',
        },
        'can_created_slices': {
            'Superset',
        },
        'can_csrf_token': {
            'Superset',
        },
        'can_csv': {
            'Superset',
        },
        'can_dashboard': {
            'Superset',
        },
        'can_datasources': {
            'Superset',
        },
        'can_delete': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            #'DatabaseAsync',
            #'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            'PlaidMetricInlineView',
            #'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            'TableColumnInlineView',
            #'TableModelView',
            #'TableSchemaView',
            #'TabStateView',
            #'TagView',
            #'UserDBModelView',
        },
        'can_delete_query': {
            #'TabStateView',
        },
        'can_download_dashboards': {
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
        },
        'can_download': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            #'DatabaseAsync',
            #'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            'PlaidMetricInlineView',
            'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            'TableColumnInlineView',
            #'TableModelView',
            #'UserDBModelView',
        },
        'can_edit': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            #'DatabaseAsync',
            #'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            'PlaidMetricInlineView',
            'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            'TableColumnInlineView',
            #'TableModelView',
            #'UserDBModelView',
        },
        'can_estimate_query_cost': {
            #'Superset',
        },
        'can_expanded': {
            #'TableSchemaView',
        },
        'can_explore': {
            'Superset',
        },
        'can_explore_json': {
            'Superset',
        },
        'can_explorev2': {
            'Superset',
        },
        'can_external_metadata': {
            #'Datasource',
        },
        'can_extra_table_metadata': {
            #'Superset',
        },
        'can_fave_dashboards_by_username': {
            'Superset',
        },
        'can_fave_dashboards': {
            'Superset',
        },
        'can_fave_slices': {
            'Superset',
        },
        'can_favstar': {
            'Superset',
        },
        'can_fetch_datasource_metadata': {
            'Superset',
        },
        'can_filter': {
            'Superset',
        },
        'can_get': {
            'Datasource',
            #'MenuApi',
            #'OpenApi',
            'TabStateView',
            #'TagView',
        },
        'can_get_value': {
            #'KV',
        },
        'can_import_dashboards': {
            'Superset',
        },
        'can_list': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DatabaseAsync',
            'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            #'PermissionModelView',
            #'PermissionViewModelView',
            'PlaidMetricInlineView',
            'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            #'TableColumnInlineView',
            #'TableModelView',
            #'UserDBModelView',
            #'ViewMenuModelView',
        },
        'can_migrate_query': {
            #'TabStateView',
        },
        'can_my_queries': {
            #'SqlLab',
        },
        'can_new': {
            'Dashboard',
        },
        'can_override_role_permissions': {
            #'Superset',
        },
        'can_post': {
            #'TableSchemaView',
            #'TabStateView',
            #'TagView',
        },
        'can_profile': {
            #'Superset',
        },
        'can_publish': {
            'Superset',
        },
        'can_put': {
            #'TabStateView',
        },
        'can_queries': {
            #'Superset',
        },
        'can_query_form_data': {
            #'Api',
        },
        'can_query': {
            #'Api',
        },
        'can_recent_activity': {
            'Superset',
        },
        'can_request_access': {
            '#Superset'
        },
        'can_results': {
            'Superset',
        },
        'can_save_dash': {
            'Superset',
        },
        'can_save': {
            #'Datasource',
        },
        'can_schemas_access_for_csv_upload': {
            #'Superset',
        },
        'can_schemas': {
            'Superset',
        },
        'can_search_queries': {
            'Superset',
        },
        'can_select_star': {
            'Superset',
        },
        'can_shortner': {
            #'R',
        },
        'can_show': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            'DatabaseAsync',
            'DatabaseTablesAsync',
            #'DatabaseView',
            #'LogModelView',
            'PlaidMetricInlineView',
            'PlaidTableModelView',
            'QueryView',
            #'RoleModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            'SqlMetricInlineView',
            #'SwaggerView',
            'TableColumnInlineView',
            #'TableModelView',
            #'UserDBModelView',
        },
        'can_slice_json': {
            'Superset',
        },
        'can_slice': {
            'Superset',
        },
        'can_slice_query': {
            'Superset',
        },
        'can_sql_json': {
            'Superset',
        },
        'can_sqllab': {
            #'Superset',
        },
        'can_sqllab_viz': {
            #'Superset',
        },
        'can_stop_query': {
            'Superset',
        },
        'can_store': {
            'KV',
        },
        'can_suggestions': {
            'TagView',
        },
        'can_sync_druid_source': {
            #'Superset',
        },
        'can_table': {
            'Superset',
        },
        'can_tables': {
            'Superset',
        },
        'can_tagged_objects': {
            'TagView',
        },
        'can_testconn': {
            'Superset',
        },
        'can_this_form_get': {
            #'CsvToDatabaseView',
            #'ResetMyPasswordView',
            #'ResetPasswordView',
            #'UserInfoEditView',
        },
        'can_this_form_post': {
            #'CsvToDatabaseView',
            #'ResetMyPasswordView',
            #'ResetPasswordView',
            #'UserInfoEditView',
        },
        'can_user_slices': {
            'Superset',
        },
        'can_userinfo': {
            #'UserDBModelView',
        },
        'can_validate_sql_json': {
            'Superset',
        },
        'can_warm_up_cache': {
            'Superset',
        },
        'copyrole': {
            #'RoleModelView',
        },
        'menu_access': {
            #'Action Log',
            #'Annotation Layers',
            #'Annotations',
            #'Base Permissions',
            'Charts',
            #'CSS Templates',
            'Dashboards',
            'Data',
            #'Databases',
            'Import Dashboards',
            #'List Roles',
            #'List Users',
            'Manage',
            #'Permission on Views/Menus',
            #'Projects',
            #'Queries',
            #'Query Search',
            #'Saved Queries',
            #'Security',
            #'Sources',
            #'SQL Editor',
            #'SQL Lab',
            'Tables',
            #'Upload a CSV',
            #'User\'s Statistics',
            #'Views/Menus',
        },
        'muldelete': {
            #'AnnotationLayerModelView',
            #'AnnotationModelView',
            #'CssTemplateAsyncModelView',
            #'CssTemplateModelView',
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
            #'DatabaseAsync',
            #'DatabaseTablesAsync',
            #'DatabaseView',
            #'PlaidMetricInlineView',
            #'PlaidTableModelView',
            'SavedQueryView',
            'SavedQueryViewApi',
            'SliceAddView',
            'SliceAsync',
            'SliceModelView',
            #'TableModelView',
        },
        'mulexport': {
            'DashboardAddView',
            'DashboardModelView',
            'DashboardModelViewAsync',
        },
        'refresh': {
            'TableModelView',
        },
        'resetmypassword': {
            #'UserDBModelView',
        },
        'resetpasswords': {
            #'UserDBModelView',
        },
        'userinfoedit': {
            #'UserDBModelView',
        },
        'yaml_export': {
            'DatabaseAsync',
            'DatabaseTablesAsync',
            'DatabaseView',
            'TableModelView',
            'PlaidTableModelView',
            'PlaidProject',
        }
    }